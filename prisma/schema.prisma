// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Phone {
  phoneId   Int       @id @default(autoincrement()) @map("user_id")
  phone     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Subject   Subject[]

  @@map("phones")
}

model Subject {
  subjectId Int      @id @default(autoincrement()) @map("subject_id")
  phone     Phone    @relation(fields: [phoneId], references: [phoneId])
  phoneId   Int      @map("phone_id")
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Task      Task[]
  Type      Type[]

  @@map("subjects")
}

model Type {
  typeId    Int      @id @default(autoincrement()) @map("type_id")
  subject   Subject  @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  subjectId Int
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Task      Task[]

  @@map("types")
}

model Task {
  taskId      Int       @id @default(autoincrement()) @map("task_id")
  subject     Subject   @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  subjectId   Int       @map("subject_id")
  type        Type      @relation(fields: [typeId], references: [typeId], onDelete: Restrict)
  typeId      Int       @map("type_id")
  title       String
  description String
  deadline    DateTime
  isDone      Boolean   @default(false) @map("is_done")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  Subtask     Subtask[]

  @@map("tasks")
}

model Subtask {
  subtaskId   Int      @id @default(autoincrement()) @map("subtask_id")
  task        Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  taskId      Int      @map("task_id")
  description String
  isDone      Boolean  @default(false) @map("is_done")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("subtasks")
}
